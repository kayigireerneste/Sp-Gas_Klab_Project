'use strict';

var React = require('react');
var ReactDOM = require('react-dom');
var createClass = require('create-react-class');
var PropTypes = require('prop-types');
var sprintf = require('sprintf');
var Arrow = require('./components/arrow');

var intervalId = undefined;

module.exports = createClass({
  displayName: 'React Horizontal Scroll',

  propTypes: {
    children: PropTypes.element,
    className: PropTypes.string,
    relative: PropTypes.bool
  },

  getInitialState: function getInitialState() {
    return {
      offset: 0,
      width: 0,
      height: 0,
      offsetLeft: 0,
      offsetTop: 0,
      scrollLeft: 0,
      scrollWidth: 0,
      canScrollLeft: false,
      canScrollRight: false
    };
  },

  componentDidMount: function componentDidMount() {
    var element = ReactDOM.findDOMNode(this);

    this.setState({
      height: window.innerHeight,
      width: element.offsetWidth,
      offsetLeft: element.offsetLeft,
      offsetTop: element.offsetTop
    });

    intervalId = setInterval((function () {
      this.setScrollState();
    }).bind(this), 250);

    element.addEventListener('scroll', this.onScroll);
    window.addEventListener('resize', this.onResize);
  },

  componentWillUnmount: function componentWillUnmount() {
    var element = ReactDOM.findDOMNode(this);

    if (intervalId) {
      clearInterval(intervalId);
    }

    element.removeEventListener('scroll', this.onScroll);
    window.removeEventListener('resize', this.onResize);
  },

  componentDidUpdate: function componentDidUpdate() {
    var target = ReactDOM.findDOMNode(this);
    var offset = this.state.offset;
    var position = offset || 0;

    target.scrollLeft = position;
  },

  onScroll: function onScroll(event) {
    event.preventDefault();
    event.stopPropagation();

    var offset = event.target.scrollLeft;
    this.setScrollState(offset);
  },

  onResize: function onResize(event) {
    event.preventDefault();
    event.stopPropagation();

    this.setScrollState();
  },

  setScrollState: function setScrollState(offset) {
    var element = ReactDOM.findDOMNode(this);
    var scrollWidth = element.scrollWidth;
    var scrollLeft = this.props.relative ? element.scrollLeft + 1 : element.scrollLeft;
    var canScrollRight = false;

    if (offset === undefined) {
      offset = this.state.offset;
    }

    if (scrollLeft < element.scrollWidth - element.offsetWidth) {
      canScrollRight = true;
    }

    if (!scrollLeft && !(element.scrollWidth - element.offsetWidth)) {
      canScrollRight = true;
    }

    this.setState({
      height: window.innerHeight,
      width: element.offsetWidth,
      offset: offset,
      scrollLeft: element.scrollLeft,
      scrollWidth: scrollWidth,
      offsetLeft: element.offsetLeft,
      offsetTop: element.offsetTop,
      canScrollLeft: offset > 0,
      canScrollRight: canScrollRight
    });
  },

  scrollLeft: function scrollLeft() {
    var element = ReactDOM.findDOMNode(this);
    var offset = element.scrollLeft - element.scrollWidth * 0.15;

    this.setScrollState(offset);
  },

  scrollRight: function scrollRight() {
    var element = ReactDOM.findDOMNode(this);
    var offset = element.scrollLeft + element.scrollWidth * 0.15;

    this.setScrollState(offset);
  },

  render: function render() {
    var body = document.body;
    var className = 'horizontal-scrolling';
    var windowInnerHeight = window.innerHeight;
    var relative = this.props.relative || false;

    var offsetTop = this.state.offsetTop;
    var offsetLeft = this.state.offsetLeft;

    var height = this.state.height;
    var width = this.state.width;

    var scrollWidth = this.state.scrollWidth;
    var scrollTop = body.scrollTop;

    var bottom = relative ? height - scrollTop : windowInnerHeight - scrollTop;
    var top = Math.max(offsetTop, scrollTop);
    var left = offsetLeft;
    var right = offsetLeft + width - 60;

    var canScrollLeft = this.state.canScrollLeft;
    var canScrollRight = this.state.canScrollRight;

    top = (bottom - top - 35) / 2 + top; // 70px arrow height
    if (offsetTop >= windowInnerHeight || offsetTop + height < scrollTop) {
      canScrollLeft = false;
      canScrollRight = false;
    }

    if (scrollWidth <= width) {
      canScrollLeft = false;
      canScrollRight = false;
    }

    if (this.props.className) {
      className = sprintf('%s %s', className, this.props.className);
    }

    return React.createElement(
      'div',
      { className: className },
      React.createElement(Arrow, { onClick: this.scrollLeft, show: canScrollLeft, top: top, left: left, relative: relative }),
      React.createElement(Arrow, { onClick: this.scrollRight, show: canScrollRight, top: top, left: right, relative: relative, direction: 'right' }),
      this.props.children
    );
  }
});